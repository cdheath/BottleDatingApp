//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace BottleOntoQueryClient.QueryServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Service.OntologyQuery.org/", ConfigurationName="QueryServiceRef.OntologyQueryService")]
    public interface OntologyQueryService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Service.OntologyQuery.org/OntologyQueryService/QueryMethodRequest", ReplyAction="http://Service.OntologyQuery.org/OntologyQueryService/QueryMethodResponse")]
        System.IAsyncResult BeginQueryMethod(BottleOntoQueryClient.QueryServiceRef.QueryMethodRequest request, System.AsyncCallback callback, object asyncState);
        
        BottleOntoQueryClient.QueryServiceRef.QueryMethodResponse EndQueryMethod(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class QueryMethodRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="QueryMethod", Namespace="http://Service.OntologyQuery.org/", Order=0)]
        public BottleOntoQueryClient.QueryServiceRef.QueryMethodRequestBody Body;
        
        public QueryMethodRequest() {
        }
        
        public QueryMethodRequest(BottleOntoQueryClient.QueryServiceRef.QueryMethodRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class QueryMethodRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string QueryText;
        
        public QueryMethodRequestBody() {
        }
        
        public QueryMethodRequestBody(string QueryText) {
            this.QueryText = QueryText;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class QueryMethodResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="QueryMethodResponse", Namespace="http://Service.OntologyQuery.org/", Order=0)]
        public BottleOntoQueryClient.QueryServiceRef.QueryMethodResponseBody Body;
        
        public QueryMethodResponse() {
        }
        
        public QueryMethodResponse(BottleOntoQueryClient.QueryServiceRef.QueryMethodResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class QueryMethodResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string @return;
        
        public QueryMethodResponseBody() {
        }
        
        public QueryMethodResponseBody(string @return) {
            this.@return = @return;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface OntologyQueryServiceChannel : BottleOntoQueryClient.QueryServiceRef.OntologyQueryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QueryMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public QueryMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OntologyQueryServiceClient : System.ServiceModel.ClientBase<BottleOntoQueryClient.QueryServiceRef.OntologyQueryService>, BottleOntoQueryClient.QueryServiceRef.OntologyQueryService {
        
        private BeginOperationDelegate onBeginQueryMethodDelegate;
        
        private EndOperationDelegate onEndQueryMethodDelegate;
        
        private System.Threading.SendOrPostCallback onQueryMethodCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public OntologyQueryServiceClient() {
        }
        
        public OntologyQueryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OntologyQueryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OntologyQueryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OntologyQueryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<QueryMethodCompletedEventArgs> QueryMethodCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BottleOntoQueryClient.QueryServiceRef.OntologyQueryService.BeginQueryMethod(BottleOntoQueryClient.QueryServiceRef.QueryMethodRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginQueryMethod(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginQueryMethod(string QueryText, System.AsyncCallback callback, object asyncState) {
            BottleOntoQueryClient.QueryServiceRef.QueryMethodRequest inValue = new BottleOntoQueryClient.QueryServiceRef.QueryMethodRequest();
            inValue.Body = new BottleOntoQueryClient.QueryServiceRef.QueryMethodRequestBody();
            inValue.Body.QueryText = QueryText;
            return ((BottleOntoQueryClient.QueryServiceRef.OntologyQueryService)(this)).BeginQueryMethod(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BottleOntoQueryClient.QueryServiceRef.QueryMethodResponse BottleOntoQueryClient.QueryServiceRef.OntologyQueryService.EndQueryMethod(System.IAsyncResult result) {
            return base.Channel.EndQueryMethod(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndQueryMethod(System.IAsyncResult result) {
            BottleOntoQueryClient.QueryServiceRef.QueryMethodResponse retVal = ((BottleOntoQueryClient.QueryServiceRef.OntologyQueryService)(this)).EndQueryMethod(result);
            return retVal.Body.@return;
        }
        
        private System.IAsyncResult OnBeginQueryMethod(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string QueryText = ((string)(inValues[0]));
            return this.BeginQueryMethod(QueryText, callback, asyncState);
        }
        
        private object[] OnEndQueryMethod(System.IAsyncResult result) {
            string retVal = this.EndQueryMethod(result);
            return new object[] {
                    retVal};
        }
        
        private void OnQueryMethodCompleted(object state) {
            if ((this.QueryMethodCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.QueryMethodCompleted(this, new QueryMethodCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void QueryMethodAsync(string QueryText) {
            this.QueryMethodAsync(QueryText, null);
        }
        
        public void QueryMethodAsync(string QueryText, object userState) {
            if ((this.onBeginQueryMethodDelegate == null)) {
                this.onBeginQueryMethodDelegate = new BeginOperationDelegate(this.OnBeginQueryMethod);
            }
            if ((this.onEndQueryMethodDelegate == null)) {
                this.onEndQueryMethodDelegate = new EndOperationDelegate(this.OnEndQueryMethod);
            }
            if ((this.onQueryMethodCompletedDelegate == null)) {
                this.onQueryMethodCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueryMethodCompleted);
            }
            base.InvokeAsync(this.onBeginQueryMethodDelegate, new object[] {
                        QueryText}, this.onEndQueryMethodDelegate, this.onQueryMethodCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override BottleOntoQueryClient.QueryServiceRef.OntologyQueryService CreateChannel() {
            return new OntologyQueryServiceClientChannel(this);
        }
        
        private class OntologyQueryServiceClientChannel : ChannelBase<BottleOntoQueryClient.QueryServiceRef.OntologyQueryService>, BottleOntoQueryClient.QueryServiceRef.OntologyQueryService {
            
            public OntologyQueryServiceClientChannel(System.ServiceModel.ClientBase<BottleOntoQueryClient.QueryServiceRef.OntologyQueryService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginQueryMethod(BottleOntoQueryClient.QueryServiceRef.QueryMethodRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("QueryMethod", _args, callback, asyncState);
                return _result;
            }
            
            public BottleOntoQueryClient.QueryServiceRef.QueryMethodResponse EndQueryMethod(System.IAsyncResult result) {
                object[] _args = new object[0];
                BottleOntoQueryClient.QueryServiceRef.QueryMethodResponse _result = ((BottleOntoQueryClient.QueryServiceRef.QueryMethodResponse)(base.EndInvoke("QueryMethod", _args, result)));
                return _result;
            }
        }
    }
}
